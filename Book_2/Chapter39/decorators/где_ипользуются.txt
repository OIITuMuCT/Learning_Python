Изменения типа
        Как мы уже видели, когда вставляются оболочки, декорированная функция или класс не предохраняют свой исходный
    тип - происходит повторная привязка к объекту-оболочке (посреднику), что может иметь значение в программах, 
    в которых применяются имена объектов или проверки типов объектов. В примере с классом-одиночкой подходы с 
    декоратором управляющей функции обеспечивают предохранение исходного типа класса для экземпляров; в примере с
    отслеживанием ни один подход этого не делает, т.к. требуются оболочки.
    Конечно в целом вы должны избегать проверки типов в полиморфных языках на подобие Python, но из большинства
    правил существуют исключения
Дополнительные вызовы
        Уровень оболочки, добавляемый декорированием, влечет за собой издержки в плане производительности из-за 
    дополнительного вызова при каждом обращении к декорированному объекту - вызовы являются относительно 
    затратными по времени операциями, поэтому декорирующие оболочки способны замедлить работу программы. В примере
    с отслеживанием оба подхода требуют прохождения каждого атрибута через уровень оболочки; в примере с singleton
    дополнительных вызовов удается избежать за счет предохранения исходного типа класса.
Все или ничего
        Поскольку декораторы дополняют функцию или класс, они обычно применяются к каждому обращению к 
    декорированному объекту в будущем. Это обеспечивает единообразный ввод в действие, но также может оказаться 
    недостатком, если дополнение желательно применять более избирательно на основе вызовов.
Три явных преимущества декораторов
    Явный синтаксис
        Декораторы делают дополнение явным и очевидным. Их синтаксис @ легче опознать, чем специальный код в вызовах
    который может появляться в любом месте файла - скажем, в примерах с классом-одиночкой и отслеживанием строки 
    декораторов будут замечены с большей вероятностью, чем добавочный код в вызовах. Кроме того, декораторы позволяют
    использовать для вызовов, которые создают функции и экземпляры, нормальный синтаксис, знакомый всем программистам
    на Python
Сопровождение кода
    Декораторы позволяют избежать повторения дополняющего кода при каждом обращении к функции или классу. Поскольку
    декораторы указываются только один раз в самоа определении класса или функции, они устраняют избыточность и 
    упрощают будущее сопровождение кода. В случае singleton и отслеживания применения подхода с управляющей функцией 
    нам необходимо использовать специальный код в каждом вызове - дополнительная работа, требуемая как в начале, 
    так и при любых изменениях, которые придется вносить в будущем.
Согласованность
     Декораторы снижают вероятность того, что программист забудет применить обязательную логику оболочки. Это 
    порождается главным образом предыдущими двумя преимуществами - поскольку декорирование делается явно и только 
    один раз в самих декорорированных объектах, декораторы способствуют более согласованному и единообразному 
    использованию API-интерфейсов, чем специальный код, который должен быть включен в каждый вызов. В примере с 
    singleton было бы легко забыть о прогоне всех вызовов, создающих экземпляры классов, через специальный код,
    что полностью нарушило бы управление одиночкой.           

