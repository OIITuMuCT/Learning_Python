Модули pickle, dbm и shelve
    Постоянство объектов реализуется тремя стандартными библиотечными модулями, 
    доступными во всех версиях Python.

pickle
    Сериализирует произвольные объекты Python в строку байтов и десериальизирует их обратно.
Модуль pickle является своего рода суперобщим инструментом форматирования и деформатирования объектов: 
он способен преобразовывать практически произвольный объект Python из памяти в строку байтов, 
которую позже можно использовать для воссоздания первоначального объекта в памяти. Модуль pickle
может обрабатывать почти любой создаваемый вами объект - списки, словари, их вложенные комбинации 
и экземпляры классов. Последние особенно удобны, поскольку они представляют данные(атрибуты) и 
поведение(методы); на самом деле такое сочетание можно считать грубым эквивалентом "записей" и "программ".
Из-за такой универсальности модуля pickle он может заменить дополнительный код, который пришлось бы 
иначе писать дял создания и разбора специальных представлений объектов внутри текстовых файлов. 
Сохраняя полученную посредством pickle обработку объекта, вы фактически делаете его постоянным:
просто загрузите и с помощью pickle воссоздайте исходный объект.



dbm(anydbm Python 2.X)
    Реализует файловую систему с доступом по ключу для хранения строк.

shelve
    Применяет предшествующие два модуля для хранения объектов Python в файле по ключу.
    Хотя модуль pickle легко применять для сохранинеия объектов в простых плоских файлах и загрузки
    из них в более позднее время, модуль shelve предлагает добавочный уровень структуры, который позволяет 
    хранить объекты, обработанные pickle, по ключу. Модуль shelve транслирует объект в строку посредством 
    pickle и сохраняет полученную строку под ключом в файле dbm; при последующей загрузке shelve извлекает
    строку по ключу и воссоздает исходный объект в памяти с помощью pickle. Все это кажется запутанным, 
    но для вашего сценария хранилище shelve обработанных посредством pickle объектов выглядит подобно
    словарю - вы индексируете по ключам для извлечения, присваиваете по ключам для сохранения и 
    используете такие словарные инструменты, как len, in и dict.keys для получения информации.
    Хранилища shelve автоматически отображают словарные операции на объекты, хранящиеся в файле.
    В действительности  для вашего сценария единственное отличие между хранилищем shelve и нормальным 
    словарем в коде связано с тем, что вы обязаны сначала открывать хранилище и закрывать его после 
    внесения изменений.Совокупный эффект в том, что хранилище shelve предлагает простую базу данных для
    сохранения и извлечения собственных объектов Python по ключам, что делает их постоянными между запусками
    программы. Хранилище shelve не поддерживает инструменты запросов, такие как SQL, и оно лишено
    ряда расширенных возможностей, имеющихся в базах данных производственного уровня(вроде подлинной обработки транзакций).
    Но собственные объекты Python, сохраненные в хранилище shelve, могут обрабатываться с привлечением 
    всей мощи языка Python  после того, как будут извлечены обратно по ключу.




    